version: "3.1"

services:
  attendance:
    image: rajagupt/attendance:latest
    container_name: attendance
    restart: always
    ports:
      - "5000:5000"
    environment:
      AZURE_FACE_ENABLED: "0"
      AWS_REKOG_ENABLED: "0"
      FACENET_ENABLED: "0"
    volumes:
      - ./user-data-vol:/app/resources/images:ro
    depends_on:
      - apm-server
      - broker
      - management
      - mongo-attendance
      - user
      - vault
  management:
    image: rajagupt/management:latest
    container_name: management
    restart: always
    ports:
      - "8082:8080"
    depends_on:
      - apm-server
      - broker
      - mongo-management
      - user
  reporting:
    image: rajagupt/reporting:latest
    container_name: reporting
    restart: always
    ports:
      - "8083:8080"
    depends_on:
      - apm-server
      - broker
      - mongo-reporting
  user:
    image: rajagupt/user:latest
    container_name: user
    restart: always
    ports:
      - "8084:8080"
    volumes:
      - ./user-data-vol:/app/resources/images
    depends_on:
      - apm-server
      - broker
      - mongo-user
  mongo-attendance:
    image: mongo:latest
    container_name: mongo-attendance
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-att-data-vol:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  mongo-express-attendance:
    image: mongo-express:latest
    container_name: mongo-express-att
    restart: always
    ports:
      - "8001:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongo-attendance
    depends_on:
      - mongo-attendance
  mongo-management:
    image: mongo:latest
    container_name: mongo-management
    restart: always
    ports:
      - "27018:27017"
    volumes:
      - mongo-mgmt-data-vol:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  mongo-express-management:
    image: mongo-express:latest
    container_name: mongo-express-mgmt
    restart: always
    ports:
      - "8002:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongo-management
    depends_on:
      - mongo-management
  mongo-reporting:
    image: mongo:latest
    container_name: mongo-reporting
    restart: always
    ports:
      - "27019:27017"
    volumes:
      - mongo-rprt-data-vol:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  mongo-express-reporting:
    image: mongo-express:latest
    container_name: mongo-express-rprt
    restart: always
    ports:
      - "8003:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongo-reporting
    depends_on:
      - mongo-reporting
  mongo-user:
    image: mongo:latest
    container_name: mongo-user
    restart: always
    ports:
      - "27020:27017"
    volumes:
      - mongo-user-data-vol:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  mongo-express-user:
    image: mongo-express:latest
    container_name: mongo-express-usr
    restart: always
    ports:
      - "8004:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongo-user
    depends_on:
      - mongo-user
  admin:
    image: rajagupt/upresent-admin:latest
    container_name: admin
    restart: always
    ports:
      - "3000:80"
    depends_on:
      - nginx
  facenet:
    image: rajagupt/facenet:latest
    container_name: facenet
    restart: always
    ports:
      - "7000:5000"
    volumes:
      - ./facenet-data-vol:/app/facenet/resources:ro
      - ./user-data-vol:/app/resources/images:ro
  training-watchdog:
    image: rajagupt/training-watchdog:latest
    container_name: training-watchdog
    restart: always
    volumes:
      - ./facenet-data-vol:/app/facenet/resources
      - ./stream-data-vol:/training-data/images:ro
  srs:
    image: ossrs/srs:3
    container_name: srs
    restart: always
    ports:
      - 1935:1935
      - 1985:1985
      - 8079:8080
    volumes:
      - ./srs-conf-vol/srs.conf:/usr/local/srs/conf/srs.conf
      - ./srs-log-vol/srs.log:/usr/local/srs/objs/srs.log
  videoprocessor:
    image: rajagupt/videoprocessor:latest
    container_name: videoprocessor
    restart: always
    ports:
      - "6000:5000"
    environment:
      SRS_CLUSTER: rtmp://dev.upresent.ga/app/
    depends_on:
      - apm-server
      - broker
      - srs
  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.1
    hostname: zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./zookeeper-logs-vol:/var/lib/zookeeper/log
      - ./zookeeper-data-vol:/var/lib/zookeeper/data
  broker:
    image: confluentinc/cp-enterprise-kafka:5.3.1
    hostname: broker
    container_name: broker
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
    volumes:
      - ./kafka-data-vol:/var/lib/kafka/data
  control-center:
    image: confluentinc/cp-enterprise-control-center:5.3.1
    hostname: control-center
    container_name: control-center
    restart: always
    depends_on:
      - zookeeper
      - broker
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
  elasticsearch:
    image: elasticsearch:7.6.1
    container_name: elasticsearch
    restart: always
    user: root
    environment:
      - "ES_JAVA_OPTS=-Xms4g -Xmx4g"
      - "discovery.type=single-node"
    ports:
      - "9200:9200"
    volumes:
      - ./elastic-data-vol:/usr/share/elasticsearch/data
  kibana:
    image: kibana:7.6.1
    container_name: kibana
    restart: always
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
      - apm-server
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.6.1
    container_name: filebeat
    restart: always
    user: root
    volumes:
      - ./filebeat-data-vol/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - elasticsearch
      - kibana
  metricbeat:
    image: docker.elastic.co/beats/metricbeat:7.6.1
    container_name: metricbeat
    restart: always
    user: root
    volumes:
      - ./metricbeat-data-vol/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    depends_on:
      - elasticsearch
      - kibana
  apm-server:
    image: docker.elastic.co/apm/apm-server:7.6.1
    container_name: apm-server
    restart: always
    ports:
      - "8200:8200"
    user: apm-server
    command: --strict.perms=false -E output.elasticsearch.hosts=["elasticsearch:9200"]
    # Commented out since no config overrides are being applied on apm-server presently
    # volumes:
    #  - ./apm-data-vol:/usr/share/apm-server:ro
    depends_on:
      - elasticsearch
  spark:
    image: bitnami/spark:2
    container_name: spark
    restart: always
    user: root
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
  spark-worker:
    image: bitnami/spark:2
    container_name: spark-worker-1
    user: root
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8081:8081"
    depends_on:
      - spark
  streamprocessor:
    image: rajagupt/streamprocessor:latest
    container_name: streamprocessor
    restart: always
    volumes:
      - ./stream-data-vol:/training-data/images/
    depends_on:
      - spark
      - spark-worker
      - broker
  vault:
    image: vault:1.3.4
    container_name: vault
    restart: always
    ports:
      - "8300:8200"
    environment:
      - VAULT_ADDR=https://0.0.0.0:8200
      #- VAULT_SKIP_VERIFY=true
    volumes:
      #- ./vault-data-vol/certs:/vault/certs:ro
      - ./proxy-data-nginx/certbot/conf:/etc/letsencrypt:ro
      - ./vault-data-vol/policies:/vault/policies:ro
      - ./vault-data-vol/config:/vault/config:ro
      - ./vault-data-vol/data:/vault/data:rw
    entrypoint: vault server -config=/vault/config/vault.json
    # entrypoint: vault server -config=/vault/config/vault_local.json
  nginx:
    image: nginx:1.17
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "5600:5600"
    volumes:
      - ./proxy-data-nginx/nginx:/etc/nginx/conf.d
      - ./proxy-data-nginx/certbot/conf:/etc/letsencrypt
      - ./proxy-data-nginx/certbot/www:/var/www/certbot
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: always
    volumes:
      - ./proxy-data-nginx/certbot/conf:/etc/letsencrypt
      - ./proxy-data-nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
volumes:
  apm-data-vol:
  elastic-data-vol:
  filebeat-data-vol:
  kafka-data-vol:
  metricbeat-data-vol:
  mongo-att-data-vol:
  mongo-mgmt-data-vol:
  mongo-rprt-data-vol:
  mongo-user-data-vol:
  proxy-data-nginx:
  srs-conf-vol:
  srs-log-vol:
  stream-data-vol:
  user-data-vol:
  vault-data-vol:
  zookeeper-data-vol:
  zookeeper-logs-vol:
  facenet-data-vol:
